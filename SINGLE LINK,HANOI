1.  Write a simple easy  C++ program to implement insertion, deletion, searching in single link list using pointer.
#include <iostream>

using namespace std;

// Node structure
struct Node {
    int data;
    Node* next;
};

// Linked list class
class LinkedList {
private:
    Node* head;

public:
    // Constructor
    LinkedList() {
        head = nullptr;
    }

    // Function to insert a new node at the beginning of the list
    void insert(int newData) {
        Node* newNode = new Node();
        newNode->data = newData;
        newNode->next = head;
        head = newNode;
    }

    // Function to delete a node with a given value
    void remove(int key) {
        if (head == nullptr) // Empty list
            return;

        // If the head node itself holds the key to be deleted
        if (head->data == key) {
            Node* temp = head;
            head = head->next;
            delete temp;
            return;
        }

        Node* current = head;
        Node* prev = nullptr;

        // Search for the key to be deleted
        while (current != nullptr && current->data != key) {
            prev = current;
            current = current->next;
        }

        // If the key was not present in the list
        if (current == nullptr)
            return;

        // Unlink the node from the linked list
        prev->next = current->next;
        delete current;
    }

    // Function to search for a given value in the list
    bool search(int key) {
        Node* current = head;

        // Traverse through the list
        while (current != nullptr) {
            if (current->data == key)
                return true;
            current = current->next;
        }

        // If the value is not found
        return false;
    }

    // Function to display the linked list
    void display() {
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

// Main function
int main() {
    LinkedList list;

    // Insert some elements
    list.insert(5);
    list.insert(10);
    list.insert(15);
    list.insert(20);

    cout << "Original List: ";
    list.display();

    // Search for an element
    int searchElement = 10;
    if (list.search(searchElement))
        cout << searchElement << " found in the list.\n";
    else
        cout << searchElement << " not found in the list.\n";

    // Delete an element
    int deleteElement = 15;
    list.remove(deleteElement);
    cout << "List after deleting " << deleteElement << ": ";
    list.display();

    return 0;
}

OUTPUT

Original List: 20 15 10 5 
10 found in the list.
List after deleting 15: 20 10 5 

2. Write a simple C++ program to implement Tower of Hanoi using recursion

#include <iostream>
using namespace std;

// Function to move a disk from source to destination
void towerOfHanoi(int disks, char source, char auxiliary, char destination) {
    if (disks == 1) {
        cout << "Move disk 1 from " << source << " to " << destination << endl;
        return;
    }
    // Move (n-1) disks from source to auxiliary using destination as auxiliary
    towerOfHanoi(disks - 1, source, destination, auxiliary);
    // Move the nth disk from source to destination
    cout << "Move disk " << disks << " from " << source << " to " << destination << endl;
    // Move (n-1) disks from auxiliary to destination using source as auxiliary
    towerOfHanoi(disks - 1, auxiliary, source, destination);
}

int main() {
    int numDisks;
    cout << "Enter the number of disks: ";
    cin >> numDisks;
    towerOfHanoi(numDisks, 'A', 'B', 'C');
    return 0;
}

OUTPUT
Enter the number of disks: 3
Move disk 1 from A to C
Move disk 2 from A to B
Move disk 1 from C to B
Move disk 3 from A to C
Move disk 1 from B to A
Move disk 2 from B to C
Move disk 1 from A to C



